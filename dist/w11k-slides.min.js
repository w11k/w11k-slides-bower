/**
 * w11k-slides
 *
 * @version v0.12.0
 * @link https://github.com/w11k/w11k-slides
 * @license MIT
 */
!function(){"use strict";var e=angular.module("w11k.slides",[]);e.constant("slidesConfig",{slides:[],slideTemplatePrefix:"slides/content/",slideTemplateSuffix:".html",masters:{},footer:{templateUrl:"footer/footer.html",left:"",middle:"",right:"$index + 1"}})}();
!function(){"use strict";function n(n){return{restrict:"A",link:function(t,e,i){function o(n){n?c.style.display=l:(l=c.style.display,c.style.display="none")}var l,c=e[0];t.$on(i.w11kEventToggle,function(n,t){o(t)}),n.$emit(i.w11kEventToggle+"-current",function(n){o(n)})}}}n.$inject=["$rootScope"];var t=angular.module("w11k.slides");t.directive("w11kEventToggle",n)}();
!function(){"use strict";function n(n){n.init()}function e(n){var e={de:{de:!0,en:!1,name:"de",next:"enOnly"},en:{de:!1,en:!0,name:"en",next:"de+en"},"de+en":{de:!0,en:!0,name:"de+en",next:"de"}},t=e.de;this.toggle=function(){this.set(t.next)}.bind(this),this.set=function(i){t=e[i],n.$broadcast("lang-de",t.de),n.$broadcast("lang-en",t.en)}.bind(this),this.get=function(){return t.name}.bind(this),this.init=function(){n.$on("lang-de-current",function(n,e){e(t.de)}),n.$on("lang-en-current",function(n,e){e(t.en)})}.bind(this)}n.$inject=["Language"],e.$inject=["$rootScope"];var t=angular.module("w11k.slides");t.run(n),t.service("Language",e)}();
!function(){"use strict";function s(s){var t={js:{js:!0,ts:!1,name:"js",next:"tsOnly"},ts:{js:!1,ts:!0,name:"ts",next:"js+ts"},"js+ts":{js:!0,ts:!0,name:"js+ts",next:"js"}},n=t.js;s.$on("src-js-current",function(s,t){t(n.js)}),s.$on("src-ts-current",function(s,t){t(n.ts)}),this.toggle=function(){n=t[n.next],s.$broadcast("src-js",n.js),s.$broadcast("src-ts",n.ts)}.bind(this),this.set=function(c){n=t[c],s.$broadcast("src-js",n.js),s.$broadcast("src-ts",n.ts)}.bind(this),this.get=function(){return n.name}.bind(this)}s.$inject=["$rootScope"];var t=angular.module("w11k.slides");t.service("SourceSnippets",s)}();
!function(){"use strict";function e(e){return{restrict:"EA",templateUrl:e.footer.templateUrl||"footer/footer.tpl.html",replace:!0,link:function(t,r,o){function l(e,r){var o=t.$eval(r);angular.isDefined(o)&&(e.innerHTML=o)}var i=r[0].querySelector(".footer-left"),f=r[0].querySelector(".footer-middle"),n=r[0].querySelector(".footer-right");l(i,o.left||e.footer.left),l(f,o.middle||e.footer.middle),l(n,o.right||e.footer.right)}}}e.$inject=["slidesConfig"];var t=angular.module("w11k.slides");t.directive("w11kFooter",e)}();
!function(){"use strict";function e(e){var n=0;this.increment=function(){this.counter++},this.decrement=function(){this.counter--},e.onbeforeunload=function(e){if(n>0){var i="Es wurde mindestens ein Beispiel geöffnet. Wenn die Seite neu geladen wird, müssen beim erneuten Öffnen auch die Beispiele neu geladen werden.";return e.returnValue=i,i}return void e.preventDefault()}}e.$inject=["$window"];var n=angular.module("w11k.slides");n.service("UnloadConfirm",e)}();
!function(){"use strict";function e(e,n){return{restrict:"A",link:function(t,r,i){var l;r.bind("click",function(t){var o=void 0===l||null===l||l.closed,a=void 0!==i.href&&null!==i.href&&void 0!==i.target&&null!==i.target,c="true"===i.w11kOpenOnce;o&&a&&c?(r.removeClass("example-shown"),n.increment(),l=e.open(i.href,i.target),t.preventDefault()):o===!1&&c&&(l.focus(),r.addClass("example-shown"),t.preventDefault())})}}}e.$inject=["$window","UnloadConfirm"];var n=angular.module("w11k.slides");n.directive("w11kOpenOnce",e)}();
!function(){"use strict";function e(e){var t=function(e){return angular.isUndefined(e)?void 0:e.replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;")},n='<div class="w11k-pretty-print"><pre class="prettyprint linenums"></pre></div>',r='<div class="title"></div>';return{restrict:"A",terminal:!0,compile:function(i,l){if(angular.isFunction(e.prettyPrintOne)){var a=i.html(),c=t(a),u=e.prettyPrintOne(c,l.lang,!0),p=angular.element(n),s=p.find("pre");return s.html(u),i.replaceWith(p),function(e,t,n){n.$observe("title",function(e){if(void 0!==e&&""!==e){var n=angular.element(r);n.html(e),t.prepend(n)}})}}}}}e.$inject=["$window"];var t=angular.module("w11k.slides");t.directive("w11kPrettyPrint",e)}();
!function(){"use strict";function e(e,t,i){function n(){angular.isDefined(r)&&(r.active=!1),r=o[0],r.active=!0}function a(){var t=e.slideTemplatePrefix||"slides/content/",i=e.slideTemplateSuffix||".html";o=e.slides.map(function(e){var n={name:e,template:t+e+i,active:!1};return n.activate=function(){r.active=!1,r=this,n.active=!0},n});for(var n=0;n<o.length;n++){var a,l=o[n];a=n>0?o[n-1]:o[o.length-1];var c;c=n+1<o.length?o[n+1]:o[0],l.previous=a,l.next=c,s[l.name]=l}}var r,o,s={};i.$on("$locationChangeSuccess",function(){var e=t.path();"/"===e.substring(0,1)&&(e=e.substring(1,e.length));var i=s[e];angular.isDefined(i)&&i.activate()}),a(),n(),this.getActiveSlide=function(){return r},this.getSlides=function(){return o},this.navigateTo=function(e){t.path(e)},this.navigateToFirst=function(){t.path(o[0].name)},this.navigateToLast=function(){t.path(o[o.length-1].name)},this.navigateToOverview=function(){t.path(o[1].name)},this.navigateToNext=function(){var e=this.getActiveSlide().next;angular.isDefined(e)&&this.navigateTo(e.name)}.bind(this),this.navigateToPrevious=function(){var e=this.getActiveSlide().previous;angular.isDefined(e)&&this.navigateTo(e.name)}.bind(this)}function t(e){this.slides=e.getSlides()}function i(e){var t=function(e){var t=e.lastChild;if(t)do e.removeChild(t),t=e.lastChild;while(t)};return{templateUrl:function(t,i){var n=i.w11kSlideMaster||i.master,a=e.masters[n];if(angular.isUndefined(a))throw new Error('No Mater-Slide found for "'+n+'". Please configure "slidesConfig" properly.');return a},restrict:"EA",replace:!0,transclude:!0,link:function(e,i,n,a,r){var o;r(function(e,n){for(var a=0;a<e.length;a++){var r=e[a];if(void 0!==r&&angular.isFunction(r.getAttribute)){var s=r.getAttribute("w11k-slide-part-source");if(void 0!==s&&null!==s){var l='[w11k-slide-part-target="'+s+'"]',c=i[0].querySelector(l);null!==c&&(t(c),c.appendChild(r,c),c.removeAttribute("w11k-slide-part-target"))}}}o=n}),e.$on("$destroy",function(){o.$destroy()})}}}function n(e,t,i,n,a){return{restrict:"EA",templateUrl:n.directiveTemplateUrl||"slides/slides.html",replace:!0,link:function(r,o){function s(){"export"===g?g="screen":"screen"===g&&(g="export"),l(g),angular.isDefined(e.localStorage)&&(e.localStorage[u]=g)}function l(e){"export"===e?(v.classList.remove("screen"),v.classList.add("export")):"screen"===e&&(v.classList.remove("export"),v.classList.add("screen"))}function c(){v.querySelector("div.overlay").classList.toggle("active")}function d(t){var n,a;39===t.keyCode||34===t.keyCode?(n=i.navigateToNext,a="navigate"):37===t.keyCode||33===t.keyCode?(n=i.navigateToPrevious,a="navigate"):36===t.keyCode?(n=i.navigateToFirst,a="navigate"):35===t.keyCode?(n=i.navigateToLast,a="navigate"):79===t.keyCode?(n=i.navigateToOverview,a="navigate"):69===t.keyCode?n=s:(80===t.keyCode||190===t.keyCode)&&(n=c),n&&r.$apply(function(){n(),"navigate"===a&&e.scrollTo(0,0)})}var v=o[0],u="w11k-slides.mode",g="export";angular.isDefined(e.localStorage)&&angular.isDefined(e.localStorage[u])&&(g=e.localStorage[u],l(g)),t.bind("keydown",function(e){if(!(e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){var t=e.target.tagName;if("INPUT"!==t&&"TEXTAREA"!==t&&"true"!==e.target.contentEditable)if(n.shortcuts){var i=n.shortcuts[e.keyCode];angular.isFunction(i)||angular.isArray(i)?a.invoke(i,{$event:e}):d(e)}else d(e)}})}}}e.$inject=["slidesConfig","$location","$rootScope"],t.$inject=["SlidesService"],i.$inject=["slidesConfig"],n.$inject=["$window","$document","SlidesService","slidesConfig","$injector"];var a=angular.module("w11k.slides");a.service("SlidesService",e),a.controller("SlidesCtrl",t),a.directive("w11kSlideMaster",i),a.directive("w11kSlides",n)}();
!function(){"use strict";function s(s){s.shortcuts=s.shortcuts||{},s.shortcuts[76]=["SourceSnippets",function(s){s.toggle()}]}function t(s){s.init()}function n(s){var t={jsOnly:{js:!0,ts:!1,next:"tsOnly"},tsOnly:{js:!1,ts:!0,next:"jsAndTs"},jsAndTs:{js:!0,ts:!0,next:"jsOnly"}},n=t.jsOnly;s.$on("src-js-current",function(s,t){t(n.js)}),s.$on("src-ts-current",function(s,t){t(n.ts)}),this.toggle=function(){n=t[n.next],s.$broadcast("src-js",n.js),s.$broadcast("src-ts",n.ts)},this.init=function(){}}s.$inject=["slidesConfig"],t.$inject=["SourceSnippets"],n.$inject=["$rootScope"];var c=angular.module("w11k.slides");c.config(s),c.run(t),c.service("SourceSnippets",n)}();
//# sourceMappingURL=data:application/json;base64,
